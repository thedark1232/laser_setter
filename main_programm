--РОБОТ СЕТАЕТ ТЕРРУ ЛАЗЕРОМ ИЗ ИС2
--движение прямо с вотока на запад со смещением на север(направо --> по ходу движения)
--робот может прокапывать себе путь вперед любым предметом(ваджра, кирка, буры)
component = require("component")
robot = require("robot")
term = require("term")
computer = require("computer")

--ПЕРЕМЕННЫЕ
local start_x, start_y, start_z --начальный координаты робота
local save_x, save_y, save_z --сохраняет координаты робота в поле
local geo --компонент геоанализатор
local navigate --компонент навигации
local inv --компонент контроллера инвентаря
local modem, modem_is_avalible --компонент модема
local file_name_min_x = "robot_max_x.lua" --значение для создаваемого файла меняется здесь(в других местах кода менять не надо)
local moveLibrary --библиотека движения робота
local sizeLibrary --библиотке поворотов робота
local energyChecker -- таблица энергии робота
local filesLibrary
local min_west, max_west --максимальная длинна пути робота на запад
local max_north_choose --максимальная длинна пути робота на север
local instrument_name --название инструмента, который прокапывает роботу путь
local laser_name = "IC2:itemToolMiningLaser" --название лазера из ис2 мода
local wrench_name =  "OpenComputers:wrench" --название гаечного ключа
local instrument_slot --зарезервированный слот под замену инструмента(лазер - кирка, кирка - лазер)
local inv_size = robot.inventorySize() --размер инвентаря робота
local up_or_down --отвечает за то, как робот будет сетать терру, над собой или под собой
--ТАБЛИЦЫ
--названия буров из ис2
local table_drill = {["GraviSuite:advDDrill"] = "GraviSuite:advDDrill", ["IC2:itemToolDrill"] = "IC2:itemToolDrill", ["GraviSuite:vajra"] = 2900000, ["IC2:itemToolDDrill"] = "IC2:itemToolDDrill", ["EMT:ThaumiumDrill"] = "EMT:ThaumiumDrill", ["EMT:DrillRockbreacker"] = "EMT:DrillRockbreacker"}
local robot_set = {up = function() robot.useUp() end, down = function() robot.useDown() end}
local components_and_librarys = {} --таблица проверки компонентов и библиотек перед загрузкой
--ФУНКЦИИ
--возвращает таблицу компонента при удачной загрузке(если этот компонент присутствует), при неудаче завершает работу программы
--возвращает таблицу компонента при удачной загрузке(если этот компонент присутствует), при неудаче завершает работу программы
function components_and_librarys.getComponent(name)
	local arg1, arg2
	local component_name = "return component." ..name
	local func = load(component_name)
	arg1, arg2 = pcall(func)
	if arg1 then
		print(name .. " ...загружено")
		return arg2		
	else
		if name == "modem" then
			return
		else
			term.clear()
			print("при поиске компонента: " ..name)
			io.write("произошла ошибка: ")
			print(arg2)
			print("программа завершена")
			os.exit()
		end
	end
end
--пробует загрузить библиотку, если библиотека не найдена, завершит работу программы
function components_and_librarys.getLibrary(name)
	local arg1, arg2
	local library_name = "return require(\"" ..name.. "\")"
	local func = load(library_name)
	arg1, arg2 = pcall(func)
	if arg1 then
		return arg2
	else
		term.clear()
		print("при поиске библиотеки: " ..name)
		io.write("произошла ошибка: ")
		print(arg2)
		print("программа завершена")
		os.exit()
	end
end
--функция дебаг сообещий
function deb_enter(what_text)
	if what_text == nil then what_text = "имеет значение nil" end
	print(what_text)
	print("жми ентер для продолжения")
	local lol_enter = io.read()
end
--переложить предмет из первого слота робота в любой другой
function first_slot_transfer()
	local table_slot
	table_slot = inv.getStackInInternalSlot(1)
	if table_slot ~= nil then
	robot.select(1)
		for i = 2,inv_size do
			table_slot = inv.getStackInInternalSlot(i)
			if table_slot == nil then
				robot.transferTo(i)
				return
			end
		end
	else
		return
	end
	::try_again1::
	term.clear()
	print("ВСЕ СЛОТЫ ИНВЕНТАРЯ РОБОТА ЗАНЯТЫ")
	print("ПЕРЕЛОЖИ САМОСТОЯТЕЛЬНО ПРЕДМЕТ ИЗ ПЕРВОГО СЛОТА, В ЛЮБОЙ ДРУГОЙ")
	print("И НАЖМИ ЕНТЕР")
	computer.beep(1000, 5)
	local enter = io.read()
	table_slot = inv.getStackInInternalSlot(1)
	if table_slot ~= nil then goto try_again1 end
	term.clear()
end
--10 секундный таймер
function weit_time_seconds(what_time)
	computer.beep(1000, 0.2)
	for i = what_time,1,-1 do
		os.sleep(1)
		print(i)
	end
end
--найти иснутрумент в слоте робота(возвращает номер слота)
function find_instrument_in_slot(name)
	local inventory
	for i = 1,inv_size do
		inventory = inv.getStackInInternalSlot(i)
		if inventory ~= nil then
			if inventory.name == name then
				return i
			end
		end
	end
	computer.beep(1000, 0.1); computer.beep(1000, 0.1); computer.beep(1000, 0.1); 
	io.write("инструмент не найден: " ..name)
	deb_enter("программу будет завершена")
	os.exit()
end
--зарядка лазера и(или) ваджру на базе
function charge_item_in_base()
	inv.dropIntoSlot(0,1)
	repeat until inv.getStackInSlot(0,1).charge > 290000
	inv.suckFromSlot(0,1)
	if table_drill[instrument_name] ~= nil then
		inv.equip()
		inv.dropIntoSlot(0,1)
		repeat until inv.getStackInSlot(0,1).charge > inv.getStackInSlot(0,1).maxCharge - 2000
		inv.suckFromSlot(0,1)
		inv.equip()
	end
end
--дропнуть все из инвентаря под робота(кроме кирки, лазера и гаечного ключа)
local function drop_all_items()
	for i = 1, robot.inventorySize() do
		local item = inv.getStackInInternalSlot(i)
		if item ~= nil then
			if item.name ~= instrument_name then
				if item.name ~= laser_name then
					if item.name ~= wrench_name then
						robot.select(i)
						robot.drop()
					end
				end
			end
		end
	end
end
--сохранение позиции робота по х координате
function coordinat_saver()
	local file_name = file_name_min_x
	local min_x_position = 0
	--открыть файл в режиме чтения
	local file_p = io.open(file_name,"r")
	if file_p == nil then --ФАЙЛ НЕ СУЩЕСТВУЕТ
		file_p = io.open(file_name,"w") --создать файл в режиме записи
		--запись параметров в файл
		print("предыдущее значение = 0")
		print("-----------------------")
		print("запись нового значения:")
		min_x_position = pcall_return_num(0, 500)
		file_p:write(min_x_position)
		file_p:close(); return min_x_position
	else --ФАЙЛ СУЩЕСТВУЕТ
		local r = file_p:read()
		if r == nil then --ФАЙЛ ПУСТОЙ
			file_p:close()
			file_p = io.open(file_name,"w") --создать файл в режиме записи
			print("предыдущее значение = 0")
			print("-----------------------")
			print("запись нового значения:")
			min_x_position = pcall_return_num(0, 500)
			file_p:write(min_x_position)
			file_p:close(); return min_x_position
		else --В ФАЙЛЕ ЕСТЬ ДАННЫЕ
			print("предыдущее значение = " .. r)
			print("-----------------------")
			print("запись нового значения:")
			min_x_position = pcall_return_num(0, 500)
			file_p:close()
			file_p = io.open(file_name,"w") --создать файл в режиме записи
			file_p:write(min_x_position)
			file_p:close(); return min_x_position
		end
	end
end
--ввод цифры с проверками(минимальное значение, максимальное значение)
function pcall_return_num(min_num, max_num)
	::again_choose::
	io.write("ввод числа -> ")
	local number = tonumber(io.read()) or 0
	if number == nil then print("ошибка ввода. "); computer.beep(1000,1); goto again_choose end
	if number < min_num or number > max_num then io.write("ошибка ввода. "); computer.beep(1000,1); goto again_choose end
	return number
end
--фунция перезаписи файла первоначальных координат
function creat_file()
	file = io.open("MyCoords","w")
	local x,z,y = navigate.getPosition()
	file:write(x.."\n"); file:write(y.."\n"); file:write(z.."\n")
	file:close()
end
--очистить область экрана
function clear_input_window(x, y, lenght)
	term.setCursor(x, y)
	x = lenght - x
	for i = 1, x do
		io.write(" ")
	end
end
--открывает стартовое меню
function open_start_menu()
	local my_x, my_z, my_y
	::try_again5::
	local multiplier = 1 --множитель передвижения робота по чанкам (работает только по N,S,W,E)
	my_x, my_z, my_y = navigate.getPosition()
	if my_x == nil or my_y == nil or my_z == nil then
		term.clear();
		computer.beep(400, 0.1)
		print("одно из направлений по навигации не определено")
		print("совмести навигацию с новой картой")
		os.exit()
	end
	                           --▀ █ ▄--
	print("█▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀ГЛАВНОЕ МЕНЮ:▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀█")
	print("█ 0 - выход из программы                         █")
	print("█ 1 - начать терраформирование                   █")
	print("█ 12 - место для вашей рекламы                   █")
	print("█▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█")
	print("█ передвинуть робота на: █                       █")
	print("█ 2 - СЕВЕР              █                       █")
	print("█ 3 - ЮГ                 █                       █")
	print("█ 4 - ЗАПАД              █                       █")
	print("█ 5 - ВОСТОК             █                       █")
	print("█ 6 - СЕВЕРО-ЗАПАД       █                       █")
	print("█ 7 - СЕВЕРО-ВОСТОК      █                       █")
	print("█ 8 - ЮГО-ЗАПАД          █                       █")
	print("█ 9 - ЮГО-ВОСТОК         █▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀█")
	print("█ 10 - движение по Z     █                       █")
	io.write("█▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█")
	if modem_is_avalible then --если компонент беспроводной сети вставлен в робота
		modem_robot_port = tonumber(filesLibrary.write_file("robot_port_number", 0)) --второй аргумент, значение возвращаемое по умолчанию, если файл не найден
		modem_comp_port = tonumber(filesLibrary.write_file("comp_port_number", 0)) --второй аргумент, значение возвращаемое по умолчанию, если файл не найден
		term.setCursor(30, 6);  io.write("МОДЕМ: ONLINE")
		term.setCursor(27, 7);  io.write("порт робота: " .. tostring(modem_robot_port))
		term.setCursor(27, 8);  io.write("порт компа: " .. tostring(modem_comp_port))
		term.setCursor(31, 9);  io.write("СМЕНА ПОРТОВ: ")
		term.setCursor(27, 10); io.write("20 - робота")
		term.setCursor(27, 11); io.write("21 - компа")
	else
		term.setCursor(30, 9); io.write("МОДЕМ: OFFLINE")
	end
	clear_input_window(28, 15, 22)
	term.setCursor(28, 15)
	io.write("ВВОД -> ")
	local chose_num = tonumber(io.read())
	if chose_num == nil then term.clear(); computer.beep(1000, 0.1); computer.beep(1000, 0.1); deb_enter("введена неизвестная команда"); term.clear(); goto try_again5
	elseif chose_num == 0 then term.clear(); computer.beep(1000, 0.1); computer.beep(1000, 0.1); print("программа завершена"); os.exit()
	elseif chose_num == 1 then term.clear()
	elseif chose_num == 2 then local mult1 = multi(); moveLibrary.swing_and_move(my_x, my_y, my_z + 1); moveLibrary.swing_and_move(my_x, my_y - mult1, my_z); term.clear(); creat_file(); goto try_again5
	elseif chose_num == 3 then local mult2 = multi(); moveLibrary.swing_and_move(my_x, my_y, my_z + 1); moveLibrary.swing_and_move(my_x, my_y + mult2, my_z); term.clear(); creat_file(); goto try_again5
	elseif chose_num == 4 then local mult3 = multi(); moveLibrary.swing_and_move(my_x, my_y, my_z + 1); moveLibrary.swing_and_move(my_x - mult3, my_y, my_z); term.clear(); creat_file(); goto try_again5
	elseif chose_num == 5 then local mult4 = multi(); moveLibrary.swing_and_move(my_x, my_y, my_z + 1); moveLibrary.swing_and_move(my_x + mult4, my_y, my_z); term.clear(); creat_file(); goto try_again5
	elseif chose_num == 6 then moveLibrary.swing_and_move(my_x, my_y, my_z + 1); moveLibrary.swing_and_move(my_x - 16, my_y - 16, my_z); term.clear(); creat_file(); goto try_again5
	elseif chose_num == 7 then moveLibrary.swing_and_move(my_x, my_y, my_z + 1); moveLibrary.swing_and_move(my_x + 16, my_y - 16, my_z); term.clear(); creat_file(); goto try_again5
	elseif chose_num == 8 then moveLibrary.swing_and_move(my_x, my_y, my_z + 1); moveLibrary.swing_and_move(my_x - 16, my_y + 16, my_z); term.clear(); creat_file(); goto try_again5
	elseif chose_num == 9 then moveLibrary.swing_and_move(my_x, my_y, my_z + 1); moveLibrary.swing_and_move(my_x + 16, my_y + 16, my_z); term.clear(); creat_file(); goto try_again5
	elseif chose_num == 10 then
		term.clear()
		print("отрицательно число двигает робота ниже, положительное выше")
		::must_do_again::
		print("--------------")
		io.write("введи число -> ")	
		local z_num = tonumber(io.read())
		if z_num == nil then term.clear(); computer.beep(1000, 0.1); print("НЕ КОРРЕКТНОЕ ЧИСЛО"); goto must_do_again end
		moveLibrary.swing_and_move(my_x, my_y, my_z + z_num); creat_file()
		goto try_again5
	elseif chose_num == 12 then
		goto try_again5
	elseif chose_num == 20 then --смена порта робота
		clear_input_window(28, 15, 22); term.setCursor(28, 15); filesLibrary.creat_file("robot_port_number", pcall_return_num(1, 65535))
		goto try_again5
	elseif chose_num == 21 then --смена порта компа
		clear_input_window(28, 15, 22); term.setCursor(28, 15); filesLibrary.creat_file("comp_port_number", pcall_return_num(1, 65535))
		goto try_again5
	else
		goto try_again5
	end
end
--посчитать множитель по чанкам
function multi()
	term.clear()
	print("на сколько чанков двигаемся?")
	::must_do_again2::
	print("--------------")
	io.write("введи число -> ")	
	local num = tonumber(io.read())
	if num == nil then term.clear(); computer.beep(1000, 0.1); print("НЕ КОРРЕКТНОЕ ЧИСЛО"); goto must_do_again2 end
	return 16 * num
end
--------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------НАЧАЛО ПРОГРАММЫ---------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------
do
	--присводения компонентов переменым
	navigate = components_and_librarys.getComponent("navigation")
	inv = components_and_librarys.getComponent("inventory_controller")
	geo = components_and_librarys.getComponent("geolyzer")
	modem = components_and_librarys.getComponent("modem")
	if modem == nil then modem_is_avalible = false else modem_is_avalible = true end --определение доступности модема
	--загрузка библиотек
	moveLibrary = components_and_librarys.getLibrary("moveLibrary")
	sizeLibrary = components_and_librarys.getLibrary("sizeLibrary")
	energyChecker = components_and_librarys.getLibrary("energyChecker")
	filesLibrary =  components_and_librarys.getLibrary("filesLibrary")
	term.clear()
	open_start_menu()
	term.clear()
	print("С КАКОГО РАССТОЯНИЕ ОТ РОБОТА НАЧАТЬ?")
	print("минимальное значение = 0")
	min_west = coordinat_saver()
	term.clear()
	print("ЗАПАДНОЕ НАПРАВЛЕНИЕ")
	print("14 == 1 чанк")
	print("30 == 2 чанка")
	print("46 == 3 чанка")
	print("62 == 4 чанка")
	print("78 == 5 чанков")
	io.write("Максимальное расстояние движения на запад: ")
	max_west = pcall_return_num(min_west, 500 + min_west)
	term.clear()
	print("СЕВЕРНОЕ НАПРАВЛЕНИЕ:")
	print("15 == 1 чанк")
	print("31 == 2 чанка")
	print("47 == 3 чанка")
	print("63 == 4 чанка")
	print("79 == 5 чанков")
	io.write("Максимальное расстояние движения на север: ")
	max_north_choose = pcall_return_num(0, 500)
	term.clear()
	print("робот должен сетать над собой = 1, под собой = 2:")
	local chouse = tonumber(io.read())
	if chouse == 1 then up_or_down = "up"
	elseif chouse == 2 then up_or_down = "down"
	else print("неизвестная команда"); computer.beep(1000, 0.1); computer.beep(1000, 0.1); computer.beep(1000, 0.1); deb_enter("программа будет заверщена"); term.clear(); os.exit() end
	
	first_slot_transfer()
	robot.select(1)
	print("лазер должен находится в инвентаре робота в любом слоте")
	print("положи в руку робота:")
	deb_enter("любую кирку,любой бур или ваджру")
	while true do --проверка имени инструмента в руке робота до начала программы
		inv.equip()
		local inv_pair = inv.getStackInInternalSlot(1)
		if inv_pair ~= nil then
			if inv_pair.name == laser_name then
				inv.equip()
				computer.beep(1000, 0.1); computer.beep(1000, 0.1); computer.beep(1000, 0.1)
				term.clear()
				print("при старте в руке робота должен быть один из следующих инструментов:")
				print("любая кирка, любой бур, ваджра")
			else
				instrument_name = inv_pair.name
				inv.equip()
				break
			end
		end
		print("ожидание до следующей проверки:")
		weit_time_seconds(10)
		term.clear()
	end
	term.clear()
	instrument_slot = find_instrument_in_slot(laser_name) --находит слот с лазером
	robot.select(instrument_slot)
	robot.transferTo(1)
	instrument_slot = 1
	robot.select(1)
	--запись стартовых координаты
	start_x, start_z, start_y = navigate.getPosition()
	sizeLibrary.turn_NSWE(4) --модрой на запад
	robot.swing() --сломать блок перед собой перед началом циклов
	moveLibrary.swing_and_move(start_x - min_west, start_y, start_z) --выдвижение на минимальную поцицию по западному направлению (х)
	local min_north, step, max_north = 0, 1, max_north_choose
	local north_move = true --движение на север
--------------------------------------------------ГЛАНВЫЙ ЦИКЛ---------------------------------------------------
	for x = min_west, max_west do
		for y = min_north, max_north, step do
			if inv.getStackInInternalSlot(1).charge < 10000 or energyChecker.how_much_enegry(5000) then
				save_x, save_z, save_y = navigate.getPosition()
				moveLibrary.swing_and_move(start_x, start_y, start_z)
				energyChecker.check_energy_in_base()
				moveLibrary.z_move(start_z + 1)
				moveLibrary.x_y_move(start_x + 1, start_y - 2)
				charge_item_in_base()
				moveLibrary.x_y_move(start_x, start_y)
				moveLibrary.z_move(start_z)
				moveLibrary.swing_and_move(save_x, save_y, save_z)
			end
			inv.equip()
			robot_set[up_or_down]()
			inv.equip()
			moveLibrary.swing_and_move(start_x - x, start_y - y, start_z)
		end
		if north_move then --реверсивное движение робота, для экономии времени сета терры
			north_move = false
			min_north = max_north_choose
			max_north = 0
			step = step * -1	
		else
			north_move = true
			min_north = 0
			max_north = max_north_choose
			step = math.abs(step)
		end
		local file_west = io.open(file_name_min_x, "w") --создать файл в режиме записи координат по оси х (западное направление)
		file_west:write(x)
		file_west:close()
	end
	inv.equip()
	robot_set[up_or_down]()
	inv.equip()
	term.clear()
	print("робот дошел до конца цикла")
	sizeLibrary.turn_NSWE(5) --модрой на восток
	drop_all_items() --выбрасывает все из инвентаря, кроме гаечного ключа из os мода, кирки и лазера
	moveLibrary.swing_and_move(start_x, start_y, start_z)
	term.clear()
	computer.beep(1000, 0.1); computer.beep(1000, 0.1); computer.beep(1000, 0.1)
	print("РАСКОПКИ ЗАВЕРШЕНЫ")
end
